import { Injectable } from '@nestjs/common';
import { randomBytes, scryptSync, timingSafeEqual } from 'crypto';

/**
 * Service that provides deterministic hashing utilities for sensitive values like API keys.
 * The hashes generated by this service are salted using Node's built-in `crypto.scrypt`
 * implementation to avoid introducing native build dependencies.
 */
@Injectable()
export class HashService {
  private static readonly KEY_LENGTH = 64;

  /**
   * Hash a secret value (e.g. API key) with a random salt using the scrypt KDF.
   *
   * @param secret - The raw secret to hash.
   * @returns A string containing the salt and derived key separated by a colon.
   */
  hashSecret(secret: string): string {
    const salt = randomBytes(16).toString('hex');
    const hash = scryptSync(secret, salt, HashService.KEY_LENGTH).toString('hex');
    return `${salt}:${hash}`;
  }

  /**
   * Validate a secret against a stored salted hash.
   *
   * @param secret - The raw secret to verify.
   * @param storedHash - The stored salt/hash combination.
   */
  verify(secret: string, storedHash: string): boolean {
    if (!secret || !storedHash) {
      return false;
    }

    const [salt, key] = storedHash.split(':');
    if (!salt || !key) {
      return false;
    }

    const derivedKey = scryptSync(secret, salt, HashService.KEY_LENGTH);
    const keyBuffer = Buffer.from(key, 'hex');

    if (keyBuffer.length !== derivedKey.length) {
      return false;
    }

    return timingSafeEqual(keyBuffer, derivedKey);
  }
}

